# -*- coding: utf-8 -*-
"""GIT/ADA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZJVX0rJo47MmbB819gGAfazIiPL758vS
"""

#UNTRACKED nao rastreado pelo git
#UNMODIFIELD nao modificado
#MODIFIED modificado
#STAGED preparado

#BRANCH ramificacoes

#COMMIT salvar estado (snapshot)
#PUSH empurrar
#PULL puxar

#MERGE #fundir


git -v #verificar se o git esta instalado e sua versao
git update-git-for-windows #atualiza a versao do git
git config --global user.name"" #configuracao de usuario 
git config --global user.email"" #configuracao de email 
git clone https://github.com/GuilhermeSsampaio/ModelagemConta.git #clonar e baixar um repositorio ja existente no github via HTTPS
git init #transformar a pasta / arquivo em um repositorio git dentro da pasta

git status#informa o estado dos arquivos da pasta (se foram modificados ou nao)
git add .\README.txt #adionando arquivo individual para comitar se for necessário (RE clique em TAB para preencher automaticamente) STAGED
git add . #adionando todos os arquivos arquivos para comitar se for necessário STAGED

git diff #mostra as linhas em que o arquivo foi modificado
git diff --staged ##mostra as linhas em que o arquivo foi modificado depois de comitado (add . STAGED) 

git commit -m "add new title" #comitando arquivo (dica: é legal comitar a cada alteracao do arquivo, mesmo se for pequena, como no exemplo: um novo titulo)
#COMMIT (salvar estado do projeto) SNAPSHOT

git log #mostra o histórico de todos os commits
git restore .\README.txt #descarta as alteracoes feitas e volta ao arquivo cru nao modificado (UNMODIFIED) 
git restore --staged .\README.txt #usado quando se deseja retornar ao estado de apenas modificado (CHANGE) depois de comitado (add . STAGED)

git remote add origin https://github.com/MaykonSferreira/GIT-ADA.git #Adiciona uma conecao remota ao repositorio do github
git remote #verifica o nome da conexao remota (ORIGIN)

git push origin master #empurra o arquivo local(ORIGIN) para a branch principal (MASTER) do github

git pull origin master #puxa as alteracoes feitas na branch principal (MASTER) E ADICIONA para o meu repositorio local (ORIGIN) || Ex: QUANDO OUTRAS PESSOAS COMITAM O ARQUIVO DA BRANCH PRINCIPAL (MASTER)

git fetch # puxa as alteracoes feitas na branch principal (MASTER) E NAO ADICIONA EM SEGUIDA (PARA VERIFICAR AS MODIFICACOES ANTES DE ADICIONAR)
git diff origin/master #mostra as alteracoes feitas na branch MASTER
git pull origin master #depois de verificado essas alteracoes adiciona na branch ORIGIN

git branch #mostra todas as branch e na qual estou conectada
git branch testing #cria uma nova branch de nome testing

git log #mostra a localidade de onde estou nas ramificacoes HEAD
git log --oneline --decorate #mostra a localidade de onde estou nas ramificacoes HEAD em uma linha(--oneline) e com cores(--decorate)

git chekout testing #muda a localidade do HEAD para a branch testing q eu criei
git log --oneline --decorate #mostra a nova localidade de onde estou nas ramificacoes HEAD em uma linha(--oneline) e com cores(--decorate)

git merge testing #as alteracoes feitas na branch (TESTING) É FUNDIDA com o meu repositorio (MASTER)